BEGIN; -- Transaction : si l'une des étapes fail, les autres sont restaurées

-- On supprime les tables avant de les re-créer
DROP TABLE IF EXISTS "card_has_tag", "tag", "card", "list";

-- List
CREATE TABLE "list" (
  "id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "title" TEXT NOT NULL,
  "position" INTEGER NOT NULL DEFAULT 1,
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMPTZ
);

-- TIMESTAMPTZ === TIMESTAMP WITH TIME ZONE
-- updated_at sans default ==> on laisse le champ "null" tant qu'il n'y a pas eu de MAJ

CREATE TABLE "card" (
  "id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "content" TEXT NOT NULL,
  "position" INTEGER NOT NULL DEFAULT 1,
  "color" VARCHAR(7), 
  "list_id" INTEGER NOT NULL REFERENCES "list"("id") ON DELETE CASCADE,
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMPTZ
);

-- VARCHAR(7) => chaine de caractère LIMITÉ à 7 caractères max
-- DEFAULT '#ffffff' => permet de donner un exemple du type de valeur attendu
-- ON DELETE CASCADE => contrainte. Permet que : SI la liste (à laquelle appartient la carte) est supprimée, ALORS la carte est supprimée également (en cascade)

CREATE TABLE "tag" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" TEXT NOT NULL UNIQUE,
  "color" VARCHAR(7),
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMPTZ
);


CREATE TABLE "card_has_tag" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "card_id" INTEGER NOT NULL REFERENCES "card"("id") ON DELETE CASCADE,
  "tag_id" INTEGER NOT NULL REFERENCES "tag"("id") ON DELETE CASCADE,
  UNIQUE ("card_id", "tag_id"),
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMPTZ
);

-- UNIQUE ("card_id", "tag_id"), == impossible d'avoir 2 fois le même tag sur la même carte (ex: pas deux fois le tag "sport" sur la carte "aller aux JO")
-- Même si on s'en sert rarement, les champs "created_at" et "updated_at" sont une bonne pratique car peuvent s'avérer utile lors de debug

COMMIT;
